---
title: "Test étude STOC"
author: "StateOfTheR"
format:
  html:
    toc: true
    toc-depth: 4
    number-sections: true
---


```{r librairies}
#| warning: false
#| message: false
#| echo: true
library(PLNmodels)     ## Modèles Poisson log-normal
library(gllvm)         ## Modèles Poisson log-normal (approx laplace)
library(tidyverse)     ## Manipulation et visualisation de données
library(knitr)         ## Manipulation de documents markdown
library(corrplot)      ## Visualisation de matrices
library(igraph)        ## Manipulation de graphes
library(tidygraph)     ## Manipulation de graphes à la mode du tidyverse
library(ggraph)        ## Visualisation de graphes à la mode ggplot
library(future)        ## parallélisation
library(sbm)
```


# Objectif

Dans ce tutoriel nous allons tester les packages {PLNmodels} et {gllvm} sur un jeu de données réels **STOC** réduit à l'année XXX.

Les comparaisons se feront en terme de:

* facilité de mise en forme des données
* modèles proposés
* temps d'execution

Ce tutoriel est largement inspiré du tutoriel suivant: https://oliviergimenez.github.io/code_livre_variables_cachees/chiquet.html#%C3%89tapes_pr%C3%A9liminaires.

# Importation des données

```{r}
#climat<-read.table("~/data/stoc_2001_2019/climatic_data.csv",sep=";",header=TRUE)
#cover<-read.table("~/data/stoc_2001_2019/cover_data.csv",sep=";",header=TRUE)
#diversity<-read.table("~/data/stoc_2001_2019/diversity_data.csv",sep=";",header=TRUE)
#stoc<-read.table("~/data/stoc_2001_2019/STOC_2001_2019_noComma.txt",sep="\t",header=TRUE)

load(file="~/gdt/atelieR2024/data/stoc_2001_2019/stoc.rda")

str(stoc)

```

Le dataframe `stoc` est déjà structuré pour une analyse avec le package {PLNmodels}. Il sera donc possiblement à revoir pour {gllmv}. A noter, qu'une fonction existe dans le package permettant de formater les données : `PLNmodels::prepare_data()`.

`stoc` se compose de:

* une matrice d'abondance de 200 espèces par 12 variables
* covariables climatiques: temp et precip
* covariables de couvertures: prefixes de 6 variables "cover_" pourcentage de type de couvertures par site d'observations
* zonebio: zone biogéographique de comptage des espèces - attention caractère
* div: mesure de diversité dans l'unité géographique (richesse spécifique?)
* Offset: vecteur 

Chaque ligne correspond à une série de mesure dans un quadrat de 2km * 2km.

```{r}
table(stoc$zonebio)
```

2 zones avec trop peu de données, nous nous restreignons aux zones Atlantic et Continental.

```{r}
stoc_sub<-filter(stoc,zonebio %in% c("atlantic","continental"))
```

Quelques descriptions des covariables, directement sur `stoc_sub`:

```{r}
# de `temp` à `zonebio`
summary(stoc_sub[,2:11])
```

```{r}
# correlation entre les var de couvertures
cor(stoc_sub[,c(4:10)])
```


```{r}
# verif si somme des couv par lignes vaut 100
sum(stoc_sub[1,4:9])
```

Afin de réduire le nombre de variable on crée une variable type de cover, `type_cover` qui correspond au type de sol le plus représenté dans le quadrat.

```{r}
# Récupération du cover le plus présent
stoc_sub$type_cover <- apply(stoc_sub[,c(4:9)], MARGIN = 1, 
                         FUN = function(x){names(which.max(x))})
```

Nous pouvons directement tester un 1er modèle.

# PLNmodels 

## Modèle PLN standard (regression)

```{r plnstandard}
T0<-Sys.time()
myPLN_M0 <- PLN(Abundance ~ 1, data=stoc_sub)
Sys.time() - T0

# Modèle avec covariables
T0<-Sys.time()
myPLN_M1_temp <- PLNmodels::PLN(Abundance ~ 1 + temp + offset(log(Offset)), data = stoc_sub)
Sys.time() - T0

T0<-Sys.time()
myPLN_M1_precip <- PLNmodels::PLN(Abundance ~ 1 + precip + offset(log(Offset)), data = stoc_sub)
Sys.time() - T0

T0<-Sys.time()
myPLN_M1_cover_Agricultural <- PLNmodels::PLN(Abundance ~ 1 + cover_Agricultural + offset(log(Offset)), data = stoc_sub)
Sys.time() - T0

T0<-Sys.time()
myPLN_M1_cover_Artificial <- PLNmodels::PLN(Abundance ~ 1 + cover_Artificial + offset(log(Offset)), data = stoc_sub)
Sys.time() - T0

T0<-Sys.time()
myPLN_M1_cover_Forest <- PLNmodels::PLN(Abundance ~ 1 + cover_Forest + offset(log(Offset)), data = stoc_sub)
Sys.time() - T0

T0<-Sys.time()
myPLN_M1_cover_Open <- PLNmodels::PLN(Abundance ~ 1 + cover_Open + offset(log(Offset)), data = stoc_sub)
Sys.time() - T0

T0<-Sys.time()
myPLN_M1_cover_Water <- PLNmodels::PLN(Abundance ~ 1 + cover_Water + offset(log(Offset)), data = stoc_sub)
Sys.time() - T0

T0<-Sys.time()
myPLN_M1_cover_Wetlands <- PLNmodels::PLN(Abundance ~ 1 + cover_Wetlands + offset(log(Offset)), data = stoc_sub)
Sys.time() - T0

T0<-Sys.time()
myPLN_M1_div <- PLNmodels::PLN(Abundance ~ 1 + div + offset(log(Offset)), 
                               data = stoc_sub)
Sys.time() - T0

T0<-Sys.time()
myPLN_M1_zonebio <- PLNmodels::PLN(Abundance ~ 1 + zonebio + offset(log(Offset)), 
                                   data = stoc_sub)
Sys.time() - T0

T0<-Sys.time()
myPLN_M1_typecover <- PLNmodels::PLN(Abundance ~ 1 + type_cover + offset(log(Offset)), 
                                     data = stoc_sub)
Sys.time() - T0

T0<-Sys.time()
myPLN_all <- PLN(Abundance ~ 1 + temp + precip + cover_Agricultural +
               cover_Artificial + cover_Forest + cover_Open + 
               cover_Water + cover_Wetlands + div + zonebio +
               offset(log(Offset)), data=stoc_sub)
Sys.time() - T0

```

```{r critpln}
# Comparaison des critères

criteria_M0_M1 <- 
  rbind(M0      = myPLN_M0$criteria,
        M1_temp = myPLN_M1_temp$criteria,
        M1_precip = myPLN_M1_precip$criteria,
        M1_cover_agri = myPLN_M1_cover_Agricultural$criteria,
        M1_cover_artificial = myPLN_M1_cover_Artificial$criteria,
        M1_cover_forest = myPLN_M1_cover_Forest$criteria,
        M1_cover_open = myPLN_M1_cover_Open$criteria,
        M1_cover_water = myPLN_M1_cover_Water$criteria,
        M1_cover_wetlands = myPLN_M1_cover_Wetlands$criteria,
        M1_div = myPLN_M1_div$criteria,
        M1_zonebio = myPLN_M1_zonebio$criteria,
        M1_all = myPLN_all$criteria
        ) %>%
    arrange(BIC)

criteria_M0_M1 %>% kable()
```

## Test Corrélation par blocs sur M0

```{r}
covmat<-myPLN_M0 %>% sigma()
heatmap(covmat)

plotMyMatrix(covmat)
```

```{r}
mySimpleSBM<- covmat %>% estimateSimpleSBM(model="gaussian",
                                           dimLabels="species",
                                           estimOptions=list(verbosity=0,
                                                             plot=FALSE))
```

```{r}
plot(mySimpleSBM)
```

## Effet zone biogéographique

```{r}
myPLN_M1_zonebio %>% 
  coefficients() %>% round(1) %>% 
  corrplot(is.corr = FALSE, method = 'color', tl.cex = .5, cl.pos = "n")
```

## Réduction de dimension - PLNPCA

Pour cette méthode qui peut prendre du temps d'exécution, il est possible d'utiliser la parallélisation avec le package {future}:

```{r}
plan(multisession, workers = 4)
```


```{r plnpca}
myPCA_m0 <- PLNmodels::PLNPCA(formula = Abundance ~ 1 + offset(log(Offset)),
                              data = stoc_sub, 
                              ranks = 1:20)
myPCA_m0
```

```{r}
plot(myPCA_m0)
```

Récupération du "meilleur" modèle suivant le BIC:

```{r pcabic}
model_m0 <- myPCA_m0$getBestModel(crit = "BIC")

# struture de l'objet PLNPCA
model_m0
```

```{r}
ggplot(data.frame(rank = 1:model_m0$rank, 
                  val  = 100 * model_m0$percent_var), 
         aes(x = rank, y = val)) + geom_col() + 
    labs(x = "Axis", y = "Variance (%)")
```

```{r}
plot(model_m0, axes = c(1, 2), map = "individual", ind_cols = stoc_sub$zonebio)
```

```{r}
plot(model_m0, axes = c(1, 2), map = "variable")
```

Matrice de covariance estimée:

```{r}
sigma(model_m0) %>% corrplot(is.corr = FALSE)
```

Possibilité d'utiliser {factoextra} pour accéder aux informations de l'ACP de manière esthétique:

```{r}
factoextra::get_eig(model_m0)
factoextra::get_pca_var(model_m0)
factoextra::get_pca_ind(model_m0)
factoextra::fviz_pca_ind(model_m0)
```

```{r}
# Ne pas oublier de fermer la parallélisation
future::plan("sequential")
```

# gllvm

{gllvm} propose plusieurs familles de liens quand {PLNmodels} se restreint à la distribution de Poisson. {PLNmodels}, dans sa nouvelle version 1.2.0, propose le zero-inflated poisson. Pour comparer les 2 packages, nous allons donc tester sur un modèle standard avec la covariable **type_cover** en fixant le lien à "ZIP" (zero-inflated poisson).

Sur cette section, nous travaillons à nouveau avec le jeu de données complet.

## modèle ZIP

```{r gllvmfit}
#| error: true
#| eval: true
# préparation des matrices en 2 matrices à partir de stoc
Y<-as.matrix(stoc$Abundance)
X<-stoc[,2:10]
studyDesign<-data.frame(sample=as.factor(1:nrow(X)))

mygllvm_all<-gllvm(Y,X,family="negative.binomial")
mygllvm_all

mygllvm_design<-gllvm(Y,X,family="negative.binomial", studyDesign=studyDesign)
mygllvm_design

# avec PLNmodels - bien vérifier d'avoir la version >=1.2.0
T0<-Sys.time()
myplnzip_typecover<- ZIPLN(Abundance ~ 1 + precip , data = stoc)
Sys.time() - T0

# avec gllvm
T0<-Sys.time()
mygllvmzip_typecover<-gllvm(Y, X, family="ZIP", num.lv = 3, 
                          formula = ~ precip)
Sys.time() - T0

```

```{r}

```





# Références

1. https://oliviergimenez.github.io/code_livre_variables_cachees/chiquet.html
1. https://pln-team.github.io/PLNmodels/
1. https://hal.science/hal-04033421/document
1. Niku et. al. gllvm: Fast analysis of multivariate abundance data with generalized linear latent variable models in R. 2019. DOI 10.1111/2041_210X.13303 

# Session Info

```{r}
sessionInfo()
```


```{r}
#| echo: false
#| eval: false
T0<-Sys.time()
mygllvm_M0<-gllvm(Y, X, family=poisson(), num.lv = 3, formula = ~ 1)
Sys.time() - T0

# Modèle avec covariable
T0<-Sys.time()
mygllvm_temp<-gllvm(Y, X, family=poisson(), num.lv = 3, formula = ~ temp,
                    offset=log(stoc_sub$offset))
Sys.time() - T0

T0<-Sys.time()
mygllvm_precip<-gllvm(Y, X, family=poisson(), num.lv = 3, formula = ~ precip,
                   offset=log(stoc_sub$Offset))
Sys.time() - T0


T0<-Sys.time()
mygllvm_div<-gllvm(Y, X, family=poisson(), num.lv = 3, formula = ~ div,
                   offset=log(stoc_sub$Offset))
Sys.time() - T0

T0<-Sys.time()
mygllvm_zonebio<-gllvm(Y, X, family=poisson(), num.lv = 3, formula = ~ zonebio,
                   offset=log(stoc_sub$Offset))
Sys.time() - T0

T0<-Sys.time()
mygllvm_all<-gllvm(Y, X, family=poisson(), num.lv = 3, 
                   formula = ~ 1 + temp + precip + cover_Agricultural +
                            cover_Artificial + cover_Forest + cover_Open + 
                            cover_Water + cover_Wetlands + div + zonebio,
                   offset=log(stoc_sub$Offset))
Sys.time() - T0
```

